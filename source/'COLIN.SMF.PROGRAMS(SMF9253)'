//MIT License
//
//Copyright (c) 2020 Stromness Software Solutions.
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//* Contributors:
//*   Colin Paice - Initial Contribution

//  ZFS file closed - stats

//
// #include <U925.h> //  the functions for common printing of vtocs
// #include <U9211.h> //  the functions for common printing of vtocs
FILE * SMF92_53  =0;  // for reserved
//
// start processing here
//
// d * RootS9211   =  NULL;
void doSMF92_53( char  * pSMF,long count){
// #include <U925i.h> //  the functions for common printing of vtocs
  if  (SMF92_53 == 0 ) SMF92_53 = MYOPEN("dd:S9253   ");
  if  (SMF92_53 == (FILE *)   -1)return;
  // the printf* routines use this global variable
  fHandle = SMF92_53;
  doneIDTHeader = 0;
  int offset;
  printOffset = 0;
  char * pSMFZ;
  char * pOffsetBase;   // this is used to caluclate field offsets
  pOffsetBase = pSMF;
  pSMFZ = pSMF;
  char * system;
  float fDuration;
  char startDT[27];
  char endDT[27];
  char * p = pSMF;  // this is incremented with each field
  fprintf(fHandle,"statistics for the zFS metadata cache\n");
  //
  // start of fields
  //
  xi(LEN         ,2 ,%    ,"Record length     ",NOPRINT);
  xi(SEG         ,2 ,%    ,"Segment type      ",NOPRINT);
  xx(FLG         ,1 ,%    ,"Record Flag       ",NOPRINT);
  xx(REC_TYPE    ,1 ,%    ,"Record type       ",NOPRINT);
  xfn(TME        ,4 ,SMFTime ,"SMFTime        ",NOPRINT);
  xfn(DTE        ,4 ,SMFDate ,"SMFDate        ",NOPRINT);
  xs(SID         ,4 ,%    ,"SMF system id     ",NOPRINT);
  xs(SSID        ,4 ,%    ,"SMF subsystem_id  ",NOPRINT);
  xi(SUBTYPE     ,2 ,%    ,"SMFSubtype        ",NOPRINT);
  xx(RESERVER24  ,2 ,%    ,"Reserved          ",NOPRINT);
  xi(SMF92SDL    ,2 ,%    ,"Length Self def   ",NOPRINT);
  xi(SMF92SOF    ,4 ,%    ,"offset to subsys  ",NOPRINT);
  xi(SMF92SLN    ,2 ,%    ,"Length    susbsy  ",NOPRINT);
  xi(SMF92SON    ,2 ,%    ,"Number    subsys  ",NOPRINT);
  xi(SMF92IOF    ,4 ,%    ,"offset to id      ",NOPRINT);
  xi(SMF92ILN    ,2 ,%    ,"Length    id      ",NOPRINT);
  xi(SMF92ION    ,2 ,%    ,"Number    id      ",NOPRINT);
  xi(SMF92DOF    ,4 ,%    ,"offset to data    ",NOPRINT);
  xi(SMF92DLN    ,2 ,%    ,"Length    Data    ",NOPRINT);
  xi(SMF92DON    ,2 ,%    ,"Number    data    ",NOPRINT);
 char JobName[9];
 TRIPLET(METACACHE  ,pSMFZ+ SMF92DOF    ,
        SMF92DON  , SMF92DLN ,NOPRINT);
    xSTCKEDT(SMF92MCT   ,16,%,"Stats Collection ",  PRINT);
    xi(SMF92MCB        ,8  ,%     ,"# Buffers         ",  PRINT);
    xi(SMF92MCLK       ,8  ,%     ,"# search  Meta C  ",  PRINT);
    xi(SMF92MCHT       ,8  ,%     ,"# Hits            ",  PRINT);
    xi(SMF92MCWP       ,8  ,%     ,"# Update          ",  PRINT);
    xi(SMF92MCPW       ,8  ,%     ,"# Partial writes  ",  PRINT);
    xi(SMF92MCBS       ,4  ,%     ,"Buffer size       ",  PRINT);
 ETRIPLET(METACACHE)
}
